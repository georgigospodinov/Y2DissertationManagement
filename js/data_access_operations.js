/**
 * Represents the Data Access Operations (DAO) layer of the program.
 *
 * @author 150009974
 * @version 2.0
 */

(function () {

    var model = require('./model');

    var admin = new model.user.User("admin", "admin", "admin", "Admin", "Admin");
    var dissertationProjects = [];
    var users = [];
    var nextDissertationNumber = 1;
    var autoGeneratedIdPrefix = "autogenerated";

    /**
     * Find the index of the dissertation with a specified id.
     * Returns -1 if no such dissertation is found.
     * @param id the id to match
     * @returns {number} found index or -1 if not there
     * @private
     */
    function _getIndexOfDissertationWithId(id) {
        return dissertationProjects.findIndex(function (currentDiss) {
            return currentDiss.id == id;
        });
    }

    /**
     * Find the index of the user with a specified id.
     * Returns -1 if no such user is found.
     * @param id the id to search for
     * @returns {number} found index or -1 if not there
     * @private
     */
    function _getIndexOfUserWithId(id) {
        return users.findIndex(function (currentUser) {
            return currentUser.userid == id;
        });
    }

    /**
     * Find a user with the specified email or telephone.
     *
     * @param email the email to match
     * @param telephone the telephone number to match
     * @returns either a reference to a user who has at least one of the email or telephone
     *           undefined if no such user exists
     * @private
     */
    function _userWithThisEmailOrPhone(email, telephone) {
        for (var i in users)
            if (users[i].email == email || users[i].telephone == telephone)
                return users[i];

        return undefined;
    }

    function getAllDissertations(clientId) {

        var dissP = [];

        var currentDiss;
        var isStudent = false;

        var userIndex = _getIndexOfUserWithId(clientId);
        if (userIndex != -1)
            isStudent = (users[userIndex].role == "student");
        for (var i in dissertationProjects) {
            currentDiss = dissertationProjects[i].dissJSON();
            if (isStudent) {
                delete currentDiss.interests;
                if (currentDiss.proposer_role == "student") // Students cannot see the propositions by other students.
                    if (dissertationProjects[i].proposer.userid != clientId)
                        currentDiss = undefined;
            }

            if (currentDiss != undefined)
                dissP.push(currentDiss);
        }

        return dissP;

    }

    function getDissertation(dissId, clientId) {

        var clientRole = "admin";

        var userIndex = _getIndexOfUserWithId(clientId);
        if (userIndex != -1)
            clientRole = users[userIndex].role;

        var dissIndex = _getIndexOfDissertationWithId(dissId);

        if (dissIndex == -1)
            throw new model.errors.NoSuchElementError("There is no dissertation with the specified id!");

        var diss = dissertationProjects[dissIndex].dissJSON();
        if (clientRole == "student") {
            delete diss.interests;

            if (diss.proposer_role == "student")
                if (diss.proposer != clientId)
                    diss = {};
        }

        return diss;

    }

    function createDissertation(dissertation, clientId) {

        if (clientId == admin.userid)
            throw new model.errors.ValidationError("Only staff and students are allowed to propose dissertations!");

        if (dissertation.id == undefined) {
            dissertation.id = autoGeneratedIdPrefix + nextDissertationNumber;
            nextDissertationNumber++;
        }

        if (!model.dissertation.isValidDissertation(dissertation))
            throw new model.errors.ValidationError("Invalid dissertation format!");

        if (_getIndexOfDissertationWithId(dissertation.id) != -1)
            throw new model.errors.ElementInUseError("Dissertation with this id already exists!");

        var foundUser = users[_getIndexOfUserWithId(clientId)];

        var diss = new model.dissertation.Dissertation(
            dissertation.id, dissertation.title, dissertation.description, foundUser);

        if (foundUser.role == "staff")
            diss.setSupervisor(foundUser);

        else // the client is student
            diss.addInterest(foundUser);

        dissertationProjects.push(diss);

        return diss.dissJSON();
    }

    function updateDissertation(newDissJSON, dissId, clientId) {

        var dissIndex = _getIndexOfDissertationWithId(dissId);
        if (dissIndex == -1)
            throw new model.errors.NoSuchElementError("No such dissertation!");

        var diss = dissertationProjects[dissIndex];
        if (diss.proposer.userid != clientId)
            throw new model.errors.ValidationError("You are not allowed to update this dissertation!");

        if (newDissJSON.title != undefined)
            diss.title = newDissJSON.title;

        if (newDissJSON.description != undefined)
            diss.description = newDissJSON.description;

        return diss.dissJSON();

    }

    function deleteDissertation(dissId, clientId) {

        var dissIndex = _getIndexOfDissertationWithId(dissId);
        if (dissIndex == -1)
            throw new model.errors.NoSuchElementError("No dissertation with the specified id!");

        var diss = dissertationProjects[dissIndex];
        if (diss.proposer.userid != clientId)
            throw new model.errors.ValidationError("You are not allowed to do so!");

        // Cascade delete:
        try {
            diss.assignee.unassignDissertation();
        }
        catch (err) {
            // An error might be thrown only if the dissertation being deleted is not assigned to a student.
            // This case error is ignored, as there is nothing to delete.
        }

        dissertationProjects.splice(dissIndex, 1);

        return {};

    }

    function deleteAllDissertations(clientId) {
        if (clientId != admin.userid)
            throw new model.errors.ValidationError("You are not allowed to do so!");

        // Cascade delete:
        dissertationProjects.forEach(function (diss) {
            try {
                diss.assignee.unassignDissertation();
            }
            catch (err) {
                // An error might be thrown only if the dissertation being deleted is not assigned to a student.
                // This case error is ignored, as there is nothing to delete.
            }
        });

        dissertationProjects = [];

        return [];
    }

    function associateSupervisor(dissId, clientId) {

        var dissIndex = _getIndexOfDissertationWithId(dissId);
        if (dissIndex == -1)
            throw new model.errors.NoSuchElementError("There is no dissertation with the specified index!");

        dissertationProjects[dissIndex].setSupervisor(users[_getIndexOfUserWithId(clientId)]);

        return dissertationProjects[dissIndex].dissJSON();
    }

    function allocateDissertation(dissId, assigneeId, clientId) {

        var dissIndex = _getIndexOfDissertationWithId(dissId);
        if (dissIndex == -1)
            throw new model.errors.NoSuchElementError("There is no dissertation with the specified id!");

        var studentIndex = _getIndexOfUserWithId(assigneeId);
        if (studentIndex == -1)
            throw new model.errors.NoSuchElementError("There is no user with the specified id!");

        var student = users[studentIndex];
        if (student.role != "student")
            throw new model.errors.ValidationError("Only students can have dissertations assigned!");

        if (users[_getIndexOfUserWithId(clientId)].role == "student")
            throw new model.errors.ValidationError("Students may not assign themselves dissertations!");

        student.assignDissertation(dissertationProjects[dissIndex]);

        var dissJson = dissertationProjects[dissIndex].dissJSON();
        dissJson.assigned = "just now to " + assigneeId;
        return dissJson;

    }

    function unallocateDissertation(assigneeId, clientId) {

        if (users[_getIndexOfUserWithId(clientId)].role == "student")
            throw new model.errors.ValidationError("Students are not allowed to un-allocate dissertations!");

        var studentIndex = _getIndexOfUserWithId(assigneeId);
        if (studentIndex == -1)
            throw new model.errors.NoSuchElementError("There is no student with the specified id!");

        if (users[studentIndex].role != "student")
            throw new model.errors.ValidationError("The specified user is not a student!");

        return users[studentIndex].unassignDissertation().dissJSON();

    }

    function expressInterest(dissId, userId, clientId) {

        if (userId != clientId)
            throw new model.errors.ValidationError("You can only express your own interest!");

        var dissIndex = _getIndexOfDissertationWithId(dissId);
        if (dissIndex == -1)
            throw new model.errors.NoSuchElementError("There is no dissertation with the given id!");

        var student = users[_getIndexOfUserWithId(clientId)];

        if (student.role != "student")
            throw new model.errors.ValidationError("Only students can express interests in dissertations!");

        dissertationProjects[dissIndex].addInterest(student);

        var jsonToReturn = dissertationProjects[dissIndex].dissJSON();
        delete jsonToReturn.interests;
        return jsonToReturn;

    }

    function undoInterestExpression(dissId, userId, clientId) {

        if (userId != clientId)
            throw new model.errors.ValidationError("You can only un-express your own interest!");

        var dissIndex = _getIndexOfDissertationWithId(dissId);
        if (dissIndex == -1)
            throw new model.errors.NoSuchElementError("There is no dissertation with the given id!");

        var student = users[_getIndexOfUserWithId(clientId)];

        if (student.role != "student")
            throw new model.errors.ValidationError("Only students can remove interests from dissertations!");

        dissertationProjects[dissIndex].removeInterest(student);

        return dissertationProjects[dissIndex].dissJSON();

    }

    function createUser(user, clientId) {

        if (clientId != admin.userid)
            throw new model.errors.ValidationError("You are not authorized to do so!");

        if (!model.user.isValidUser(user))
            throw new model.errors.ValidationError("Invalid user format!");

        if (_getIndexOfUserWithId(user.userid) != -1)
            throw new model.errors.ElementInUseError("A user with the same id already exists");

        var userToAdd;
        if (user.role == "student")
            userToAdd = new model.student.Student(user.userid, user.password, user.given, user.surname);

        else // the role is "staff"
        {
            if (!model.staff.isValidStaff(user))
                throw new model.errors.ValidationError("Invalid staff format!");

            if (_userWithThisEmailOrPhone(user.profile.email, user.profile.telephone) != undefined)
                throw new model.errors.ElementInUseError("Email or telephone is already in use");

            userToAdd = new model.staff.Staff(
                user.userid, user.password, user.given, user.surname, user.profile.job_title,
                user.profile.email, user.profile.telephone, user.profile.roomnumber);

            for (var i in user.profile.research)
                userToAdd.addResearchArea(user.profile.research[i]);
        }

        users.push(userToAdd);

        if (user.role == "student")
            return userToAdd.studentJSON();

        else return userToAdd.staffJSON();

    }

    function updateUser(newUserJSON, userId, clientId) {

        if (clientId != admin.userid)
            throw new model.errors.ValidationError("You are not authorized to do so!");

        var indexOfUserToChange = _getIndexOfUserWithId(userId);
        if (indexOfUserToChange == -1)
            throw new model.errors.NoSuchElementError("A user with the specified id does not exist!");

        if (!(newUserJSON instanceof Object))
            throw new model.errors.ValidationError("Invalid update format!");

        var userToUpdate = users[indexOfUserToChange];
        if (newUserJSON.role != undefined)
            throw new model.errors.ValidationError("You cannot change the role of a user!");

        if (newUserJSON.given != undefined)
            userToUpdate.given = newUserJSON.given;

        if (newUserJSON.surname != undefined)
            userToUpdate.surname = newUserJSON.surname;

        if (newUserJSON.password != undefined)
            userToUpdate.password = newUserJSON.password;

        if (userToUpdate.role == "staff") {

            if (newUserJSON.profile != undefined) {

                if (newUserJSON.profile.job_title != undefined)
                    userToUpdate.jobTitle = newUserJSON.profile.job_title;

                if (newUserJSON.profile.email != undefined)
                    userToUpdate.email = newUserJSON.profile.email;

                if (newUserJSON.profile.telephone != undefined)
                    userToUpdate.telephone = newUserJSON.profile.telephone;

                if (newUserJSON.profile.room_number != undefined)
                    userToUpdate.roomNumber = newUserJSON.profile.room_number;

                if (newUserJSON.profile.research != undefined)
                    userToUpdate.researchAreas = newUserJSON.profile.research;

            }

            return userToUpdate.staffJSON();

        }
        else return userToUpdate.studentJSON();

    }

    function deleteUser(userId, clientId) {

        if (userId == "*")
            return deleteAllUsers(clientId);

        if (clientId != admin.userid)
            throw new model.errors.ValidationError("You are not authorized to do so!");

        var index = _getIndexOfUserWithId(userId);
        if (index == -1)
            throw new model.errors.NoSuchElementError("There is no user with the specified id!");

        // Cascade delete:
        var l = dissertationProjects.length;
        for (var i = 0; i < l; i++) {

            // Delete dissertations proposed by this user.
            if (dissertationProjects[i].proposer.userid == userId) {
                dissertationProjects.splice(i, 1);
                i--;
                l--;
            }

            // See if the user has another form of relation with the dissertation.
            else {

                // Some dissertations lose their supervisor.
                if (dissertationProjects[i].supervisor.userid == userId)
                    dissertationProjects[i].supervisor = undefined;

                // Others loose their interested students.
                for (var j in dissertationProjects[i].interestedStudents)
                    if (dissertationProjects[i].interestedStudents[j].userid == userId) {
                        dissertationProjects[i].interestedStudents.splice(j, 1);
                        break;
                    }
            }

        }

        try {
            users[index].unassignDissertation();
        }
        catch (err) {
            // An error might be thrown only if the user being deleted is not assigned a dissertation.
            // This case error is ignored, as there is nothing to cascade delete.
        }

        users.splice(index, 1);

        return {};
    }

    function deleteAllUsers(clientId) {
        if (clientId != admin.userid)
            throw new model.errors.ValidationError("You are not authorized to do so!");

        users = [];

        // Cascade delete (no users means no dissertations):
        deleteAllDissertations(clientId);

        return [];
    }

    function retrieveUser(userId, clientId) {

        if (userId == admin.userid) {
            if (clientId == admin.userid)
                return admin.partJSON();

            else throw new model.errors.ValidationError("You are not authorized to see this!");
        }

        var index = _getIndexOfUserWithId(userId);
        if (index == -1)
            throw new model.errors.NoSuchElementError("There is no user with the specified id!");

        var obj;
        if (users[index].role == "student")
            obj = users[index].studentJSON();

        else obj = users[index].staffJSON();

        if (clientId != admin.userid)
            delete obj.password;

        return obj;

    }

    function getAllUsers(clientId) {

        var usrs = [];

        var obj;
        for (var i in users) {

            if (users[i].role == "staff")
                obj = users[i].staffJSON();

            else obj = users[i].studentJSON();

            if (clientId != admin.userid)
                delete obj.password;

            usrs.push(obj);

        }

        return usrs;

    }

    function getAllStaffMembers(clientId) {

        var staffMembers = [];
        var obj;
        for (var i in users)
            if (users[i].role == "staff") {

                obj = users[i].staffJSON();
                if (clientId != admin.userid)
                    delete obj.password;

                staffMembers.push(obj);

            }

        return staffMembers;

    }

    module.exports = {
        getAllDissertations: getAllDissertations,
        getDissertation: getDissertation,
        createDissertation: createDissertation,
        updateDissertation: updateDissertation,
        deleteDissertation: deleteDissertation,
        deleteAllDissertations: deleteAllDissertations,
        associateSupervisor: associateSupervisor,
        expressInterest: expressInterest,
        undoInterestExpression: undoInterestExpression,
        allocateDissertation: allocateDissertation,
        unallocateDissertation: unallocateDissertation,

        createUser: createUser,
        retrieveUser: retrieveUser,
        deleteUser: deleteUser,
        getAllUsers: getAllUsers,
        deleteAllUsers: deleteAllUsers,
        getAllStaffMembers: getAllStaffMembers,
        updateUser: updateUser
    };

})();